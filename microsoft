1.You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

class Solution {
    public int evalRPN(String[] tokens) {
      Stack<Integer> stack=new Stack<>();
      for(int i=0;i<tokens.length;i++)// or for(String ch:tokens)
      {
        String ch=tokens[i];
        if(ch.equals("+"))
        {
            stack.push(stack.pop()+stack.pop());
        }
        else if(ch.equals("-"))
        {
            int b=stack.pop();
            int a=stack.pop();
            stack.push(a-b);
        }
        else if(ch.equals("*"))
        {
            stack.push(stack.pop()*stack.pop());
        }
        else if(ch.equals("/"))
        {
            int b=stack.pop();
            int a=stack.pop();
            if(b!=0)
                stack.push(a/b);
            else
               System.out.println("Division by 0 not possible") ;
        }
        else
        {
            stack.push(Integer.valueOf(ch));
        }
      } 
      return stack.pop(); 
    }
}

3. Bulls and Cows


class Solution {
    public String getHint(String secret, String guess) {
        
        int bulls = 0;
        int cows = 0;
        int[] digits = new int[10];
        for (int i = 0; i<secret.length(); i++) 
        {
            if (secret.charAt(i) == guess.charAt(i)) 
                bulls++;
            else {
                if (digits[secret.charAt(i)-48] < 0) //48 is the ascii value of 0
                    cows++;
                if (digits[guess.charAt(i)-48] > 0) 
                    cows++;
                digits[secret.charAt(i)-48]++;//increasing if we encounter a digit in secret
                digits[guess.charAt(i)-48]--;//decreasing if we encounter a digit in guess
        }
        }
        return (bulls + "A" + cows + "B");
    }
}


4. 

class Solution {
    public int maxRotateFunction(int[] nums) {
        int F = 0;
        int S = 0;
        for(int i = 0; i < nums.length; i++){
            F = F + (nums[i] * i);
            S = S + nums[i];
        }

        int max = F; // this is F0
        int n = nums.length;
        for(int i = n - 1; i >= 1 ; i--){
            F = F + S - n * nums[i];
            max = Math.max(max , F);
        }
      return max;
   
